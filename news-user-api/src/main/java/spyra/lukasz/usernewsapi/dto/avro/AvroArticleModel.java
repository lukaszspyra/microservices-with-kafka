/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package spyra.lukasz.usernewsapi.dto.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AvroArticleModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8591966743232650760L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroArticleModel\",\"namespace\":\"spyra.lukasz.usernewsapi.dto.avro\",\"fields\":[{\"name\":\"author\",\"type\":\"string\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"news\",\"type\":{\"type\":\"record\",\"name\":\"AvroNewsModel\",\"fields\":[{\"name\":\"content\",\"type\":\"string\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroArticleModel> ENCODER =
      new BinaryMessageEncoder<AvroArticleModel>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroArticleModel> DECODER =
      new BinaryMessageDecoder<AvroArticleModel>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AvroArticleModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AvroArticleModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AvroArticleModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroArticleModel>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AvroArticleModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AvroArticleModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AvroArticleModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AvroArticleModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence author;
   private java.lang.CharSequence title;
   private spyra.lukasz.usernewsapi.dto.avro.AvroNewsModel news;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroArticleModel() {}

  /**
   * All-args constructor.
   * @param author The new value for author
   * @param title The new value for title
   * @param news The new value for news
   */
  public AvroArticleModel(java.lang.CharSequence author, java.lang.CharSequence title, spyra.lukasz.usernewsapi.dto.avro.AvroNewsModel news) {
    this.author = author;
    this.title = title;
    this.news = news;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return author;
    case 1: return title;
    case 2: return news;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: author = (java.lang.CharSequence)value$; break;
    case 1: title = (java.lang.CharSequence)value$; break;
    case 2: news = (spyra.lukasz.usernewsapi.dto.avro.AvroNewsModel)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'author' field.
   * @return The value of the 'author' field.
   */
  public java.lang.CharSequence getAuthor() {
    return author;
  }


  /**
   * Sets the value of the 'author' field.
   * @param value the value to set.
   */
  public void setAuthor(java.lang.CharSequence value) {
    this.author = value;
  }

  /**
   * Gets the value of the 'title' field.
   * @return The value of the 'title' field.
   */
  public java.lang.CharSequence getTitle() {
    return title;
  }


  /**
   * Sets the value of the 'title' field.
   * @param value the value to set.
   */
  public void setTitle(java.lang.CharSequence value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'news' field.
   * @return The value of the 'news' field.
   */
  public spyra.lukasz.usernewsapi.dto.avro.AvroNewsModel getNews() {
    return news;
  }


  /**
   * Sets the value of the 'news' field.
   * @param value the value to set.
   */
  public void setNews(spyra.lukasz.usernewsapi.dto.avro.AvroNewsModel value) {
    this.news = value;
  }

  /**
   * Creates a new AvroArticleModel RecordBuilder.
   * @return A new AvroArticleModel RecordBuilder
   */
  public static spyra.lukasz.usernewsapi.dto.avro.AvroArticleModel.Builder newBuilder() {
    return new spyra.lukasz.usernewsapi.dto.avro.AvroArticleModel.Builder();
  }

  /**
   * Creates a new AvroArticleModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroArticleModel RecordBuilder
   */
  public static spyra.lukasz.usernewsapi.dto.avro.AvroArticleModel.Builder newBuilder(spyra.lukasz.usernewsapi.dto.avro.AvroArticleModel.Builder other) {
    if (other == null) {
      return new spyra.lukasz.usernewsapi.dto.avro.AvroArticleModel.Builder();
    } else {
      return new spyra.lukasz.usernewsapi.dto.avro.AvroArticleModel.Builder(other);
    }
  }

  /**
   * Creates a new AvroArticleModel RecordBuilder by copying an existing AvroArticleModel instance.
   * @param other The existing instance to copy.
   * @return A new AvroArticleModel RecordBuilder
   */
  public static spyra.lukasz.usernewsapi.dto.avro.AvroArticleModel.Builder newBuilder(spyra.lukasz.usernewsapi.dto.avro.AvroArticleModel other) {
    if (other == null) {
      return new spyra.lukasz.usernewsapi.dto.avro.AvroArticleModel.Builder();
    } else {
      return new spyra.lukasz.usernewsapi.dto.avro.AvroArticleModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for AvroArticleModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroArticleModel>
    implements org.apache.avro.data.RecordBuilder<AvroArticleModel> {

    private java.lang.CharSequence author;
    private java.lang.CharSequence title;
    private spyra.lukasz.usernewsapi.dto.avro.AvroNewsModel news;
    private spyra.lukasz.usernewsapi.dto.avro.AvroNewsModel.Builder newsBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(spyra.lukasz.usernewsapi.dto.avro.AvroArticleModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.author)) {
        this.author = data().deepCopy(fields()[0].schema(), other.author);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.news)) {
        this.news = data().deepCopy(fields()[2].schema(), other.news);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasNewsBuilder()) {
        this.newsBuilder = spyra.lukasz.usernewsapi.dto.avro.AvroNewsModel.newBuilder(other.getNewsBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing AvroArticleModel instance
     * @param other The existing instance to copy.
     */
    private Builder(spyra.lukasz.usernewsapi.dto.avro.AvroArticleModel other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.author)) {
        this.author = data().deepCopy(fields()[0].schema(), other.author);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.news)) {
        this.news = data().deepCopy(fields()[2].schema(), other.news);
        fieldSetFlags()[2] = true;
      }
      this.newsBuilder = null;
    }

    /**
      * Gets the value of the 'author' field.
      * @return The value.
      */
    public java.lang.CharSequence getAuthor() {
      return author;
    }


    /**
      * Sets the value of the 'author' field.
      * @param value The value of 'author'.
      * @return This builder.
      */
    public spyra.lukasz.usernewsapi.dto.avro.AvroArticleModel.Builder setAuthor(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.author = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'author' field has been set.
      * @return True if the 'author' field has been set, false otherwise.
      */
    public boolean hasAuthor() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'author' field.
      * @return This builder.
      */
    public spyra.lukasz.usernewsapi.dto.avro.AvroArticleModel.Builder clearAuthor() {
      author = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'title' field.
      * @return The value.
      */
    public java.lang.CharSequence getTitle() {
      return title;
    }


    /**
      * Sets the value of the 'title' field.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public spyra.lukasz.usernewsapi.dto.avro.AvroArticleModel.Builder setTitle(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.title = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'title' field.
      * @return This builder.
      */
    public spyra.lukasz.usernewsapi.dto.avro.AvroArticleModel.Builder clearTitle() {
      title = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'news' field.
      * @return The value.
      */
    public spyra.lukasz.usernewsapi.dto.avro.AvroNewsModel getNews() {
      return news;
    }


    /**
      * Sets the value of the 'news' field.
      * @param value The value of 'news'.
      * @return This builder.
      */
    public spyra.lukasz.usernewsapi.dto.avro.AvroArticleModel.Builder setNews(spyra.lukasz.usernewsapi.dto.avro.AvroNewsModel value) {
      validate(fields()[2], value);
      this.newsBuilder = null;
      this.news = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'news' field has been set.
      * @return True if the 'news' field has been set, false otherwise.
      */
    public boolean hasNews() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'news' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public spyra.lukasz.usernewsapi.dto.avro.AvroNewsModel.Builder getNewsBuilder() {
      if (newsBuilder == null) {
        if (hasNews()) {
          setNewsBuilder(spyra.lukasz.usernewsapi.dto.avro.AvroNewsModel.newBuilder(news));
        } else {
          setNewsBuilder(spyra.lukasz.usernewsapi.dto.avro.AvroNewsModel.newBuilder());
        }
      }
      return newsBuilder;
    }

    /**
     * Sets the Builder instance for the 'news' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public spyra.lukasz.usernewsapi.dto.avro.AvroArticleModel.Builder setNewsBuilder(spyra.lukasz.usernewsapi.dto.avro.AvroNewsModel.Builder value) {
      clearNews();
      newsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'news' field has an active Builder instance
     * @return True if the 'news' field has an active Builder instance
     */
    public boolean hasNewsBuilder() {
      return newsBuilder != null;
    }

    /**
      * Clears the value of the 'news' field.
      * @return This builder.
      */
    public spyra.lukasz.usernewsapi.dto.avro.AvroArticleModel.Builder clearNews() {
      news = null;
      newsBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroArticleModel build() {
      try {
        AvroArticleModel record = new AvroArticleModel();
        record.author = fieldSetFlags()[0] ? this.author : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.title = fieldSetFlags()[1] ? this.title : (java.lang.CharSequence) defaultValue(fields()[1]);
        if (newsBuilder != null) {
          try {
            record.news = this.newsBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("news"));
            throw e;
          }
        } else {
          record.news = fieldSetFlags()[2] ? this.news : (spyra.lukasz.usernewsapi.dto.avro.AvroNewsModel) defaultValue(fields()[2]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroArticleModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroArticleModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroArticleModel>
    READER$ = (org.apache.avro.io.DatumReader<AvroArticleModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.author);

    out.writeString(this.title);

    this.news.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.author = in.readString(this.author instanceof Utf8 ? (Utf8)this.author : null);

      this.title = in.readString(this.title instanceof Utf8 ? (Utf8)this.title : null);

      if (this.news == null) {
        this.news = new spyra.lukasz.usernewsapi.dto.avro.AvroNewsModel();
      }
      this.news.customDecode(in);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.author = in.readString(this.author instanceof Utf8 ? (Utf8)this.author : null);
          break;

        case 1:
          this.title = in.readString(this.title instanceof Utf8 ? (Utf8)this.title : null);
          break;

        case 2:
          if (this.news == null) {
            this.news = new spyra.lukasz.usernewsapi.dto.avro.AvroNewsModel();
          }
          this.news.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










