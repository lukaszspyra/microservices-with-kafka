package spyra.lukasz.newsconsumer.listener;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Component;
import reactor.core.publisher.Mono;
import schema.avro.AvroNewsModel;
import schema.avro.AvroArticleModel;
import spyra.lukasz.newsconsumer.config.KafkaTopicNameProvider;
import spyra.lukasz.newsconsumer.dto.Article;
import spyra.lukasz.newsconsumer.service.MessageService;
import spyra.lukasz.newsconsumer.service.WebClientService;

@Component
public class KafkaListeners {

  private final WebClientService webClientService;

  private final MessageService messageService;

  public KafkaListeners(final WebClientService webClientService, final MessageService messageService, final KafkaTopicNameProvider kafkaTopicNameProvider) {
    this.webClientService = webClientService;
    this.messageService = messageService;
  }

  /**
   * Avro Notes:
   * <p>
   * Generated classes by avro-maven-plugin are located in target/generated-sources which needs to be marked as sources root
   * to be picked up by IDE (indicating compilation errors), then 'mvn compile' run.
   * Avro generated classes are located in producer (news-collector) and optionally in consumer (news-user-api module),
   * which allows to use SpecificRecords during deserialization.
   * (another solutions: create separate module and set it as dependency to the remaining microservices or use GenericRecord
   * in consumer)
   * @param article generated by maven-avro-plugin in /generated-sources folder
   */
  @KafkaListener(topics = {"#{kafkaTopicNameProvider.jsonTopic()}"}, groupId = "message-group")
  void newsJsonListener(Article article) {
    System.out.printf("KAFKA json listener received: %s%n", article);
    messageService.publishAvroResponseMessage(AvroArticleModel.newBuilder().setAuthor(article.author).setTitle(article.title).setNews(new AvroNewsModel(article.news.content)).build());
  }

  @KafkaListener(topics = {"#{kafkaTopicNameProvider.newsRequest()}"}, groupId = "message-group")
  void newsRequestListener(String date) {
    System.out.printf("KAFKA request listener received: %s%n", date);
    Mono<ResponseEntity<String>> responseEntity = webClientService.sendRequest(date);

    responseEntity.subscribe(response -> {
      HttpStatus status = (HttpStatus) response.getStatusCode();
      if (status.equals(HttpStatus.OK)) {
        System.out.println("Data successfully fetched from external API, publishing to string response topic");
        messageService.publishStringResponseMessage(date, response.getBody());
      } else {
        System.out.println("Data fetch failed");
      }
    });
  }
}
